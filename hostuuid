#!/usr/bin/perl

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Written by Richard Hartmann in 2009, feel free to email
# richih dot mailinglist -at- gmail dot com with questions.

=head1 NAME

hostuuid - program to create, display, check /etc/hostuuid

=cut

use strict;
use warnings;

use UUID::Tiny;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Basename;

my $VERSION;
$VERSION = '1.2';
my $program = basename($0);

my $file = '/etc/hostuuid';
my $force;
my $print_version;
my $print_help;
my $input;
my $create_uuid = 0;
my $quiet;
my $no_stdin=0;

=head1 SYNOPSIS

B<hostuuid> [-f I<file>]

B<hostuuid> -c [--force] [-f I<file>]

echo 4f1cc27c-6c7b-4419-9db6-5b2f6a600b37 | B<hostuuid>

=head1 DESCRIPTION

B<hostuuid> creates, displays and verifies the contents of /etc/hostuuid or any other file.
It will also read anything on STDIN and verify if it's a UUID.

=head1 OPTIONS

=over 4

=item B<-f|--file> I<filename>

The I<filename> B<hostuuid> will read from/write to.

=item B<--force>

Force creation of new UUID.

=item B<-c|--create>

Create a new UUID.

=item B<-q|--quiet>

Don't print anything.
B<hostuuid> will still exit with proper return codes for you to script with.

=item B<--input>

Save this UUID to I<filename>.
Defaults to /etc/hostuuid

=item B<--nostdin>

Do not listen on STDIN.
Needed to work around a bug in debconf.

=item B<-h|-?|--help>

Print help.

=item B<--version>

Print version information.

=back

=head1 FILES

/etc/hostuuid

=head1 REQUIRES

Perl 5.8, UUID::Tiny

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Richard Hartmann <richih.mailinglist@gmail.com>

=cut

GetOptions (
            'file|f=s'  => \$file,
            'force'     => \$force,
            'create|c'  => \$create_uuid,
            'input=s'   => \$input,
            'quiet|q'   => \$quiet,
            'nostdin'   => \$no_stdin,
            'help|h|?'  => \$print_help,
            'version'   => \$print_version,
           ) or print_help(255);

sub print_version() {
	unless ($quiet) {
		print <<VERSION;
$program: version $VERSION

This program is released under GPLv3
Written by Richard Hartmann for Debian and Grml
VERSION
	}
	exit 0;
}

sub print_help {
	my ($exit_code) = @_;
	unless ($quiet) {
		print <<HELP;
Help for $program:

  -f, --file     : file to read from/write to. Defaults to /etc/hostuuid
  --force        : force creation of new UUID
  -c, --create   : create & save UUID
  -q, --quiet    : Don't print anything
  --input        : Save UUID to file. Defaults to /etc/hostuuid
  --nostdin      : Do not listen on STDIN
  -h, -?, --help : print this help
  --version      : print version
HELP
	}	
	exit $exit_code;
}

sub create_uuid() {
	my $uuid = find_hostuuid();
	if ($uuid && !$force) {
		print STDERR "$program: Found UUID '$uuid' in '$file'. Aborting!\n" unless $quiet;
		exit 101;
	} else {
		save_uuid(create_UUID_as_string(UUID_V4));
	}
}

sub find_hostuuid() {
	return 0 unless ((-e $file && $create_uuid) || !$create_uuid);
	open (F, "<", "$file") or do {
		die "$program: Could not open file: '$file'\: $!\n" unless $quiet;
		exit 2;
	};
	my $uuid = check_uuid(<F>);
	close (F);
	return $uuid;
}

sub check_uuid {
	my ($string) = @_;
	return $1 if ($string =~ /^([0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12})$/i);
	return undef;
}

sub save_uuid {
	my ($uuid) = @_;
	unless (check_uuid($uuid)) {
		print "$uuid is NOT a valid UUID\n" unless $quiet;
		exit 3;
	}
	open (F, ">", "$file") or do {
		die "$program: Could not open file: '$file'\: $!\n" unless $quiet;
		exit 5;
	};
	print "$program\: Stored UUID '$uuid' in '$file'\n" unless $quiet;
	print F "$uuid\n";
	close (F);
	exit 0;
}

sub main() {
	unless ($no_stdin || -t STDIN) { ## we need to test for $no_stdin cause debconf makes us hang, otherwise
		my $uuid = check_uuid(<STDIN>);
		if ($uuid) {
			print "$uuid is a valid UUID\n" unless $quiet;
			exit 0;
		} else {
			print "NOT a valid UUID\n" unless $quiet;
			exit 105;
		}
	}
	print_version()   if $print_version;
	print_help(0)     if $print_help;
	save_uuid($input) if $input;
	create_uuid()     if $create_uuid;

	my $uuid = find_hostuuid();
	if ($uuid) {
		print "$uuid\n" unless $quiet;
		exit 0;
	} else {
		print STDERR "$program: Could not find valid UUID in '$file'\n" unless $quiet;
		exit 100;
	}
}

main();
